http://csbin.io/promises

// Challenge 1

function sayHello() {
  setTimeout(() => {console.log("hello")}, 1000);
}

// Uncomment the line below when ready
 sayHello(); // should log "Hello" after 1000ms

// Challenge 2
var promise = new Promise(function (resolve, reject) {
   setTimeout(() => {resolve("Resolved!")}, 1000);
 // ADD CODE HERE
});

promise.then((resolve) => console.log(resolve))
// Should print out "Resolved!"
// ADD CODE HERE

// Challenge 3

promise = new Promise(function(resolve, reject) {
  reject('Rejected!')
  // ADD CODE HERE
})

promise.catch((rejected) => console.log(rejected))
// Should print out "Reject!"
// ADD CODE HERE


// Challenge 4

promise = new Promise(function (resolve, reject) {
  // ADD CODE HERE
  resolve("Promise has been resolved!")
});

// UNCOMMENT THE LINES BELOW WHEN READY
 promise.then(() => console.log('PROMISE HAS BEEN RESOLVED!'));
 console.log("I'M NOT THE PROMISE!");


// Challenge 5
function delay(){
return new Promise((resolve) => {
  setTimeout(()=>{resolve()}, 1000)
} )
}

// Uncomment the code below to test
// This code should log "Hello" after 1000ms
 delay().then(sayHello);


// Challenge 6
//
// ADD CODE BELOW
 var secondPromise = new Promise(function(resolve,reject){resolve("Seconddd!")})
 var firstPromise = new Promise(function(resolve,reject){resolve(secondPromise)})

 firstPromise.then((promise) => promise.then(console.log(promise)))

// Challenge 7
const fakePeople = [
  { name: 'Rudolph', hasPets: false, currentTemp: 98.6 },
  { name: 'Zebulon', hasPets: true, currentTemp: 22.6 },
  { name: 'Harold', hasPets: true, currentTemp: 98.3 },
]

const fakeAPICall = (i) => {
  const returnTime = Math.floor(Math.random() * 1000);
  return new Promise((resolve, reject) => {
    if (i >= 0 && i < fakePeople.length) {
      setTimeout(() => resolve(fakePeople[i]), returnTime);
    } else {
      reject({ message: "index out of range" });
    }
  });
};

function getAllData() {
  const promise1 = fakeAPICall(0);
  const promise2 = fakeAPICall(1);
  const promise3 = fakeAPICall(2);

  return Promise.all([promise1, promise2, promise3])
    .then((results) => {
      return results;
    })
    .catch((error) => {
      console.log(error.message);
      throw error;
    });
}
getAllData().then((results) => {console.log(results)}).catch((error) =>{console.log(error.message)})


